---
- name: Copy files to container
  hosts: localhost
  vars_files:
    - ../../create_server/vars/vars.yml
  gather_facts: no
  tasks:
    #  - name: copy ssh_config to container
    #  ansible.builtin.shell: docker cp
    #  /home/tobi/KBKM-Bot/hetzner_server_management/molecule/default/ssh_config
    #  molecule-test-bot:/etc/ssh/
    #  register: res_cp_command_ssh_config
    #  changed_when: false
    - name: Copy duck.sh to container
      ansible.builtin.shell:  # noqa 305
        docker cp
        ${{
        github.workspace }}/hetzner_server_management/molecule/default/duck.sh
        molecule-test-bot:/home
      changed_when: false

- name: Converge
  hosts: molecule-test-bot
  gather_facts: no
  tasks:
    - name: Parameters taken from Discord input
      ansible.builtin.set_fact:
        # Attention: In Discord you can specify the Server type
        # (vpn or minecraft) which will be the name in the hetzner cloud console
        server_name: "{{ type }}"
        server_location: "{{ location }}"  # fsn1, nbg1, hel1, ash, hil
        hetzner_token: "{{ lookup('ansible.builtin.env', 'hetznerToken') }}"
        vpn_server_domain:
          "{{ lookup('ansible.builtin.env', 'duckdnsDomainVPN') }}"
        minecraft_server_domain:
          "{{ lookup('ansible.builtin.env', 'duckdnsDomainMINECRAFT') }}"

    - name: Gather server info before potential server creation
      hetzner.hcloud.hcloud_server_info:
        name: "{{ server_name }}"  # vpn or minecraft
        api_token: "{{ hetzner_token }}"
      register: server_info

    - name: Print server info before potential server creation
      ansible.builtin.debug:
        var: server_info

    - name: Vpn with location not in the US
      ansible.builtin.set_fact:
        server_type: cx11  # cpx11, cpx21, cx11, cpx41
        server_firewall: VpnFirewall
        server_ssh_key: vpn_ssh_key
      when: (server_name == "vpn")
        and (server_location != "ash")
        or (server_location != "hil")

    # you have to choose cpx11 here,
    # because hetzner doesn't offer the cx11 in the US
    - name: Vpn server with location in the US
      ansible.builtin.set_fact:
        server_type: cpx11  # cpx11, cpx21, cx11, cpx41
        server_firewall: VpnFirewall
        server_ssh_key: vpn_ssh_key
      when: (server_name == "vpn")
        and (server_location == "ash")
        or (server_location == "hil")

    - name: Minecraft server
      ansible.builtin.set_fact:
        server_type: cpx21  # cpx11, cpx21, cx11, cpx41
        server_firewall: MinecraftFirewall
        server_ssh_key: minecraft_ssh_key
      when: server_name == "minecraft"

    - name: Print server configuration
      ansible.builtin.debug:
        msg:
          - "Server type: {{ server_name }}"
          - "Server location: {{ server_location }}"
          - "Server hardware: {{ server_type }}"
          - "Server firewall: {{ server_firewall }}"
          - "Server ssh-key: {{ server_ssh_key }}"

    - name: Create firewall and ssh key for vpn server
      when: server_name == "vpn"
      block:
        - name: Create a firewall for vpn server
          hetzner.hcloud.hcloud_firewall:
            name: VpnFirewall
            api_token: "{{ hetzner_token }}"
            rules:
              - direction: in
                protocol: icmp
                source_ips:
                  - 0.0.0.0/0
                  - ::/0
                description: allow icmp in
              - direction: in
                protocol: tcp
                source_ips:
                  - 0.0.0.0/0
                  - ::/0
                port: "22"
                description: allow ssh in
              - direction: in
                protocol: udp
                source_ips:
                  - 0.0.0.0/0
                  - ::/0
                port: "51820"
                description: allow wireguard in
            state: present

        - name: Generate an OpenSSH keypair for vpn server
          community.crypto.openssh_keypair:
            path: /root/.ssh/vpn_ssh_key
            type: ed25519

        - name: Read in vpn ssh key
          ansible.builtin.shell: |
            cat /root/.ssh/vpn_ssh_key.pub
          register: public_vpn_ssh_key
          changed_when: false

        - name: Delete ssh key for vpn server
          hetzner.hcloud.hcloud_ssh_key:
            name: vpn_ssh_key
            api_token: "{{ hetzner_token }}"
            state: absent
          changed_when: false

        - name: Create a ssh key for vpn server
          hetzner.hcloud.hcloud_ssh_key:
            name: vpn_ssh_key
            api_token: "{{ hetzner_token }}"
            public_key: "{{ public_vpn_ssh_key.stdout }}"
            state: present
          changed_when: false

    - name: Create firewall and ssh key for minecraft server
      when: server_name == "minecraft"
      block:
        - name: Create a firewall for minecraft server
          hetzner.hcloud.hcloud_firewall:
            name: MinecraftFirewall
            api_token: "{{ hetzner_token }}"
            rules:
              - direction: in
                protocol: icmp
                source_ips:
                  - 0.0.0.0/0
                  - ::/0
                description: allow icmp in
              - direction: in
                protocol: tcp
                source_ips:
                  - 0.0.0.0/0
                  - ::/0
                port: "22"
                description: allow ssh in
              - direction: in
                protocol: tcp
                source_ips:
                  - 0.0.0.0/0
                  - ::/0
                port: "25565"
                description: allow minecraft clients to connect
            state: present

        - name: Generate an OpenSSH keypair for minecraft server
          community.crypto.openssh_keypair:
            path: /root/.ssh/minecraft_ssh_key
            type: ed25519

        - name: Read in minecraft ssh key
          ansible.builtin.shell: |
            cat /root/.ssh/minecraft_ssh_key.pub
          register: public_minecraft_ssh_key
          changed_when: false

        - name: Delete ssh key for minecraft server
          hetzner.hcloud.hcloud_ssh_key:
            name: minecraft_ssh_key
            api_token: "{{ hetzner_token }}"
            state: absent
          changed_when: false

        - name: Create a ssh key for minecraft server
          hetzner.hcloud.hcloud_ssh_key:
            name: minecraft_ssh_key
            api_token: "{{ hetzner_token }}"
            public_key: "{{ public_minecraft_ssh_key.stdout }}"
            state: present
          changed_when: false

    - name: Delete already existing server when the location differs
      hetzner.hcloud.hcloud_server:
        name: "{{ server_name }}"  # vpn or minecraft
        api_token: "{{ hetzner_token }}"
        state: absent
      when: (server_info.hcloud_server_info[0].name is not undefined)
        and (server_name == server_info.hcloud_server_info[0].name)
        and (server_location != server_info.hcloud_server_info[0].location)

    - name: Create server based on configuration
      hetzner.hcloud.hcloud_server:
        name: "{{ server_name }}"  # vpn or minecraft
        api_token: "{{ hetzner_token }}"
        server_type: "{{ server_type }}"  # cpx11, cpx21, cx11, cpx41
        image: ubuntu-22.04
        firewalls: "{{ server_firewall }}"
        location: "{{ server_location }}"  # fsn1, nbg1, hel1, ash, hil
        force: true
        ssh_keys:
          - "{{ server_ssh_key }}"
        state: present

    - name: Gather server info after server creation
      hetzner.hcloud.hcloud_server_info:
        name: "{{ server_name }}"  # vpn or minecraft
        api_token: "{{ hetzner_token }}"
      register: server_info_after_creation

    - name: Print server info after server creation
      ansible.builtin.debug:
        var: server_info_after_creation

    # the script duck.sh updates the "current ip" entry
    # in your duckdns.org account
    - name:
        Update ip address for duckdns {{ vpn_server_domain }}.duckdns.org
        -> {{ server_info_after_creation.hcloud_server_info[0].ipv4_address }}
      ansible.builtin.shell:  # noqa 305
        "/home/duck.sh
        {{ vpn_server_domain }}
        {{ server_info_after_creation.hcloud_server_info[0].ipv4_address }}"
      when: server_name == "vpn"
      changed_when: false

    # the script duck.sh updates the "current ip" entry
    # in your duckdns.org account
    - name:
        Update ip address for duckdns {{ minecraft_server_domain }}.duckdns.org
        -> {{ server_info_after_creation.hcloud_server_info[0].ipv4_address }}
      ansible.builtin.shell:  # noqa 305
        "/home/duck.sh
        {{ minecraft_server_domain }}
        {{ server_info_after_creation.hcloud_server_info[0].ipv4_address }}"
      when: server_name == "minecraft"
      changed_when: false

    # For more info look at
    # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/wait_for_module.html#parameter-timeout
    - name: Check every 3 second if ssh is available (maximal 300 seconds)
      ansible.builtin.wait_for:
        port: 22
        host:
          '{{ server_info_after_creation.hcloud_server_info[0].ipv4_address }}'
        search_regex: OpenSSH
        delay: 3
      register: ssh_connection

    - name: Print ssh connection
      ansible.builtin.debug:
        msg: "{{ ssh_connection }}"
